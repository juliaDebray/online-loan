<?php

namespace App\Controller\Admin;

use App\Entity\Employees;
use App\Entity\Users;
use EasyCorp\Bundle\EasyAdminBundle\Config\KeyValueStore;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\Field;
use EasyCorp\Bundle\EasyAdminBundle\Field\FormField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\RepeatedType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class EmployeesCrudController extends AbstractCrudController
{
    /** @var UserPasswordHasherInterface */
    private $passwordHasher;

    public static function getEntityFqcn(): string
    {
        return Employees::class;
    }

    public function configureFields(string $pageName): iterable
    {
        return [
            TextField::new('email'),
//            FormField::addPanel('Change password')->setIcon('fa fa-key'),
            Field::new('password')->onlyOnForms()
                ->setFormType(RepeatedType::class)
                ->setFormTypeOptions([
                    'type' => PasswordType::class,
                    'invalid_message' => 'les mots de passe ne sont pas identiques',
                    'options' => ['attr' => ['class' => 'password-field']],
                    'first_options'  => ['label' => 'Mot de passe'],
                    'second_options' => ['label' => 'Répétez le mot de passe']
                ]),
        ];
    }

    public function passwordHasher(UserPasswordHasherInterface $passwordHasher, Employees $employee): string
    {
        return $passwordHasher->hashPassword($employee, $employee->getPassword());
    }

//    public function createEntity(string $entityFqcn)
//    {
//        $employee = new Employees();
//        $employee->setRoles(['ROLE_EMPLOYEE']);
//        $employee->setStatus('validated');
//        $employee->setPassword
//        (
//            $this->passwordHasher($employee)
//        );
//        return parent::createEntity($entityFqcn); // TODO: Change the autogenerated stub
//    }

//    public function createEditFormBuilder(EntityDto $entityDto, KeyValueStore $formOptions, AdminContext $context): FormBuilderInterface
//    {
//        $formBuilder = parent::createEditFormBuilder($entityDto, $formOptions, $context);
//
//        $this->addEncodePasswordEventListener($formBuilder);
//
//        return $formBuilder;
//    }
//
//    public function createNewFormBuilder(EntityDto $entityDto, KeyValueStore $formOptions, AdminContext $context): FormBuilderInterface
//    {
//        $formBuilder = parent::createNewFormBuilder($entityDto, $formOptions, $context);
//
//        $this->addEncodePasswordEventListener($formBuilder);
//
//        return $formBuilder;
//    }
//
//    public function setEncoder(UserPasswordHasherInterface $passwordHasher): void
//    {
//        $this->$passwordHasher = $passwordHasher;
//    }
//
//    protected function addEncodePasswordEventListener(FormBuilderInterface $formBuilder)
//    {
//        $formBuilder->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
//            /** @var Users $user */
//            $user = $event->getData();
//            if ($user->getPassword()) {
//                $user->setPassword($this->passwordHasher->hashPassword($user, $user->getPassword()));
//            }
//        });
//    }

}
